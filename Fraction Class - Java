public class Fraction {
    // fields (variables defined outside a method)
    // local variables (variables defined within a method)
    private int numerator;
    private int denominator;

    // CONSTRUCTORS

    /**
     * Creates a fraction object with a numerator and denominator.
     * @param numerator the numerator
     * @param denominator the denominator
     */
    public Fraction(int numerator, int denominator){
        this.numerator = numerator;
        this.denominator = denominator;
    }

    /**
     * Creates a copy of another fraction object.
     * @param other the other fraction being copied
     */
    public Fraction(Fraction other){
        this.numerator = other.numerator;
        this.denominator = other.denominator;
    }

    /**
     * Creates a fraction object that is an integer equal to the numerator.
     * @param numerator the numerator
     */
    public Fraction(int numerator){
        this.numerator = numerator;
        this.denominator = 1;
    }

    /**
     * Creates a fraction object with a numerator of 0 and a denominator of 1.
     */
    public Fraction(){
        this.numerator = 0;
        this.denominator = 1;
    }

    /**
     * Creates a fraction object from a decimal value.
     * @param x the decimal value
     */
    public Fraction(double x){
        String num = String.valueOf(x);
        double power = (double)num.length() - num.indexOf('.') - 1;
        this.denominator = (int) Math.pow(10, power);
        this.numerator = (int) (x * Math.pow(10, power));
        this.reduce();
    }

    /**
     * Converts the fraction object to a string.
     * @return the fraction as it would be written normally: numerator / denominator
     */
    @Override
    public String toString(){

        this.reduce();
        if (numerator == 0 || denominator == 1){
            return String.valueOf(numerator);
        }
        return numerator + "/" + denominator;
    }

    // INSTANCE METHODS
    // accessor

    /**
     * Accesses the numerator of a fraction object.
     * @return the numerator
     */
    public int getNumerator(){
        return numerator;
    }

    /**
     * Accesses the denominator of a fraction object.
     * @return the denominator
     */
    public int getDenominator(){
        return denominator;
    }

    // mutator

    /**
     * Changes the value of the denominator of a fraction object.
     * @param numerator the numerator
     */
    public void setNumerator(int numerator){
        this.numerator = numerator;
    }

    /**
     * Changes the value of the denominator of a fraction object.
     * @param denominator teh denominator
     */
    public void setDenominator(int denominator){
        this.denominator = denominator;
    }

    /**
     * Changes the values of the numerator and the denominator of a fraction object.
     * @param numerator the numerator
     * @param denominator the denominator
     */
    public void setBoth(int numerator, int denominator){
        this.numerator = numerator;
        this.denominator = denominator;
    }

    /**
     * Calculates the value of the fraction as a decimal.
     * @return the value as a decimal
     */
    public double toDecimal(){
        return (double) numerator / denominator;
    }

    /**
     * Determines if this fraction is greater than another fraction.
     * @param other the other fraction
     * @return true if this fraction is greater than the second fraction
     */
    public boolean greaterThan(Fraction other){
        return this.toDecimal() > other.toDecimal();
    }

    // if you wrote other.numerator = 0;
    // there won't be an error because they are in the same class even if they are different instances of it

    /**
     * Creates a new fraction that is the product of two fractions.
     * @param other the other fraction
     * @return this fraction x other fraction
     */
    public Fraction multiply(Fraction other){
        Fraction temp = new Fraction(this.numerator*other.numerator, this.denominator*other.denominator);
        temp.reduce();
        return temp;
    }

    /**
     * Creates a new fraction that is the sum of two fractions.
     * @param other the other fraction
     * @return this fraction + other fraction
     */
    public Fraction add(Fraction other){
        Fraction temp = new Fraction(this.numerator* other.denominator+this.denominator*other.numerator, this.denominator* other.denominator);
        temp.reduce();
        return temp;
    }

    /**
     * Determines if two fractions are equal.
     * @param other the other fraction
     * @return true if both fractions are the same
     */
    public boolean equals(Fraction other){
        return this.numerator*other.denominator == this.denominator*other.numerator;
    }

    /**
     * Changes the value of this fraction to the product of this fraction and the other fraction.
     * @param other the other fraction
     */
    public void timesEquals(Fraction other){
        this.numerator *= other.numerator;
        this.denominator *= other.denominator;
        this.reduce();
    }

    /**
     * Changes the value of this fraction to the sum of this fraction and the other fraction.
     * @param other the other fraction
     */
    public void plusEquals(Fraction other){
        this.numerator = this.numerator* other.denominator+this.denominator*other.numerator;
        this.denominator = this.denominator* other.denominator;
        this.reduce();
    }

    /**
     * Changes the value of this fraction to the product of this fraction and an integer.
     * @param k the integer
     */
    public void integerMultiply(int k){
        this.numerator *= k;
        this.reduce();
    }

    /**
     * Reduces this fraction to its simplest equivalent terms.
     */
    private void reduce(){
        int maxFactor = 1;
        int smallest;
        if (Math.abs(this.numerator) < Math.abs(this.denominator)){
            smallest = Math.abs(this.numerator);
        }
        else{
            smallest = Math.abs(this.denominator);
        }
        for (int i = 1; i <= smallest; i++){
            if (this.numerator % i == 0 && this.denominator % i == 0){
                maxFactor = i;
            }
        }
        this.numerator /= maxFactor;
        this.denominator /= maxFactor;

        if (this.numerator < 0 && this.denominator < 0){
            this.numerator *= -1;
            this.denominator *= -1;
        }
        else if (this.denominator < 0){
            this.numerator *= -1;
            this.denominator *= -1;
        }
    }

    /**
     * Creates a new fraction object that is the reciprocal of this fraction object.
     * @return the reciprocal
     */
    public Fraction reciprocal(){
        Fraction flipped = new Fraction(this.denominator, this.numerator);
        flipped.reduce();
        return flipped;

    }

    /**
     * Creates a new fraction that is the quotient of this fraction and another fraction.
     * @param other the other fraction (the divisor)
     * @return this fraction / other fraction
     */
    public Fraction divide(Fraction other){
        Fraction temp = this.multiply(other.reciprocal());
        temp.reduce();
        return temp;
    }

    /**
     * Creates a new fraction that is the difference of this fraction and another fraction.
     * @param other the fraction being subtracted
     * @return this fraction - other fraction
     */
    public Fraction subtract(Fraction other){
        Fraction temp = new Fraction(this.numerator* other.denominator-this.denominator*other.numerator, this.denominator* other.denominator);
        temp.reduce();
        return temp;
    }


    // STATIC METHODS (class methods)

    /**
     * Creates a fraction that is the product of two fractions.
     * @param f1 fraction one
     * @param f2 fraction two
     * @return f1 x f2
     */
    public static Fraction product(Fraction f1, Fraction f2){
        return f1.multiply(f2);
        // when you're in the Fraction class, you can just call product(f1, f2)
        // outside of this class, you must do Fraction.product(f1, f2)
    }

    /**
     * Creates a fraction that is the sum of two fractions.
     * @param f1 fraction one
     * @param f2 fraction two
     * @return f1 + f2
     */
    public static Fraction sum(Fraction f1, Fraction f2){
        return f1.add(f2);
    }

    /**
     * Creates a fraction that is the quotient of two fractions.
     * @param f1 fraction 1
     * @param f2 fraction 2
     * @return f1 / f2
     */
    public static Fraction quotient(Fraction f1, Fraction f2){
        return f1.divide(f2);
    }

    /**
     * Creates a fraction that is the difference between two fractions.
     * @param f1 fraction 1
     * @param f2 fraction 2
     * @return | f1 - f2 |
     */
    public static Fraction difference(Fraction f1, Fraction f2){
        if (f1.toDecimal() < f2.toDecimal()){
            return f2.subtract(f1);
        }
        return f1.subtract(f2);
    }

}
